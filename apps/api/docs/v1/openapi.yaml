openapi: 3.0.0
info:
  title: Hypha API
  version: 1.0.0
  description: |
    API for dashboard charts, wallet, proposals, and token operations.
paths:
  /dashboard/donut-chart:
    get:
      summary: Get donut chart data
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
        - name: range
          in: query
          required: false
          schema:
            type: string
            enum: ["1D", "1W", "1M", "6M", "1Y"]
            default: "1M"
      responses:
        '200':
          description: Donut chart data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DonutChartResponse'
  /dashboard/area-chart:
    get:
      summary: Get real-time area chart data
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
        - name: range
          in: query
          required: false
          schema:
            type: string
            enum: ["1D", "1W", "1M", "6M", "1Y"]
            default: "1M"
        - name: group_by
          in: query
          required: false
          schema:
            type: string
            enum: ["hour", "4hours", "day", "4days", "week", "month"]
      responses:
        '200':
          description: Area chart data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AreaChartResponse'
  /dashboard/bar-chart:
    get:
      summary: Get bar chart data
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
        - name: range
          in: query
          required: false
          schema:
            type: string
            enum: ["1D", "1W", "1M", "6M", "1Y"]
            default: "1M"
        - name: group_by
          in: query
          required: false
          schema:
            type: string
            enum: ["hour", "4hours", "day", "4days", "week", "month"]
      responses:
        '200':
          description: Bar chart data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BarChartResponse'
  /dashboard/line-chart:
    get:
      summary: Get line chart data
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
        - name: range
          in: query
          required: false
          schema:
            type: string
            enum: ["1D", "1W", "1M", "6M", "1Y"]
            default: "1M"
        - name: group_by
          in: query
          required: false
          schema:
            type: string
            enum: ["hour", "4hours", "day", "4days", "week", "month"]
      responses:
        '200':
          description: Line chart data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineChartResponse'
  /spaces/{id}:
    get:
      summary: Get space info
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Space info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
  /spaces:
    get:
      summary: Get user's spaces
      responses:
        '200':
          description: List of spaces
          content:
            application/json:
              schema:
                type: object
                properties:
                  spaces:
                    type: array
                    items:
                      $ref: '#/components/schemas/Space'
  /wallet/receive:
    get:
      summary: Receive token
      parameters:
        - name: token_id
          in: query
          required: true
          schema:
            type: integer
        - name: network
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Receive token info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiveTokenResponse'
  /wallet/send:
    post:
      summary: Send token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendTokenRequest'
      responses:
        '200':
          description: Send token response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendTokenResponse'
  /wallet/recipients:
    get:
      summary: Get recipients for token
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Recipients list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipientsResponse'
  /wallet/tokens/{id}:
    get:
      summary: Get token balance and transactions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Token balance and transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBalanceResponse'
  /wallet:
    get:
      summary: Get token balances by type
      responses:
        '200':
          description: Token balances grouped by type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletBalancesResponse'
  /proposals:
    get:
      summary: Get proposals
      parameters:
        - name: dao_id
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
            nullable: true
            enum: ["active", "past", null]
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 0
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of proposals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalsListResponse'
    post:
      summary: Create proposal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProposalRequest'
      responses:
        '200':
          description: Proposal created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalDetailsResponse'
  /proposals/{id}:
    get:
      summary: Get proposal details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Proposal details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalDetailsResponse'
  /proposals/{id}/votes:
    get:
      summary: Get proposal votes
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Proposal votes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalVotesResponse'
  /proposals/{id}/vote:
    post:
      summary: Vote on proposal
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteRequest'
      responses:
        '200':
          description: Vote response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteResponse'
components:
  schemas:
    DonutChartResponse:
      type: object
      properties:
        id:
          type: integer
        space_id:
          type: integer
        range:
          type: string
        title:
          type: string
        type:
          type: string
          enum: ["Statistics"]
        total:
          type: number
        groups:
          type: array
          items:
            type: object
            properties:
              label:
                type: string
              percentage:
                type: number
    AreaChartResponse:
      type: object
      properties:
        id:
          type: integer
        space_id:
          type: integer
        range:
          type: string
        group_by:
          type: string
        current_value:
          type: number
        change_percent:
          type: number
        type:
          type: string
          enum: ["Statistics"]
        data:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              value:
                type: number
    BarChartResponse:
      type: object
      properties:
        id:
          type: integer
        space_id:
          type: integer
        range:
          type: string
        group_by:
          type: string
        type:
          type: string
          enum: ["Revenue"]
        data:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              subscriptions:
                type: number
    LineChartResponse:
      type: object
      properties:
        id:
          type: integer
        space_id:
          type: integer
        range:
          type: string
        group_by:
          type: string
        type:
          type: string
          enum: ["Statistics", "Revenue"]
        data:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
              members:
                type: number
              community:
                type: number
    Space:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        cover_image_url:
          type: string
          format: uri
        icon_url:
          type: string
          format: uri
        members_count:
          type: integer
        proposals_count:
          type: integer
    ReceiveTokenResponse:
      type: object
      properties:
        token_id:
          type: integer
        network:
          type: string
        address:
          type: string
        qr_code_url:
          type: string
          format: uri
    SendTokenRequest:
      type: object
      properties:
        token_id:
          type: integer
        dao_id:
          type: integer
        amount:
          type: number
        recipient_key:
          type: string
        memo:
          type: string
        network_fee:
          type: number
          nullable: true
      required:
        - token_id
        - dao_id
        - amount
        - recipient_key
        - memo
    SendTokenResponse:
      type: object
      properties:
        message:
          type: string
        transaction_id:
          type: string
        timestamp:
          type: string
          format: date-time
        status:
          type: string
    RecipientsResponse:
      type: object
      properties:
        recipients:
          type: array
          items:
            type: object
            properties:
              username:
                type: string
              avatar_url:
                type: string
                format: uri
              key:
                type: string
    TokenBalanceResponse:
      type: object
      properties:
        name:
          type: string
        symbol:
          type: string
        balance:
          type: number
        icon_url:
          type: string
          format: uri
        transactions:
          type: array
          items:
            type: object
            properties:
              username:
                type: string
              avatar_url:
                type: string
                format: uri
              direction:
                type: string
                enum: ["income", "payment"]
              amount:
                type: number
              symbol:
                type: string
              timestamp:
                type: string
                format: date-time
    WalletBalancesResponse:
      type: object
      properties:
        utility_tokens:
          type: array
          items:
            $ref: '#/components/schemas/TokenBalance'
        ownership_tokens:
          type: array
          items:
            $ref: '#/components/schemas/OwnershipTokenBalance'
        voice_tokens:
          type: array
          items:
            $ref: '#/components/schemas/VoiceTokenBalance'
    TokenBalance:
      type: object
      properties:
        name:
          type: string
        symbol:
          type: string
        balance:
          type: number
        icon_url:
          type: string
          format: uri
    OwnershipTokenBalance:
      allOf:
        - $ref: '#/components/schemas/TokenBalance'
        - type: object
          properties:
            percentage:
              type: number
    VoiceTokenBalance:
      allOf:
        - $ref: '#/components/schemas/TokenBalance'
        - type: object
          properties:
            percentage:
              type: number
    ProposalsListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProposalSummary'
        meta:
          type: object
          properties:
            total:
              type: integer
            limit:
              type: integer
            offset:
              type: integer
          required: [total, limit, offset]
      required: [data, meta]
    ProposalSummary:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        label:
          type: string
          enum: ["contribution", "payment", "funding", "agreement"]
        image_URL:
          type: string
          format: uri
        state:
          type: string
          enum: ["active", "past"]
        unity:
          type: integer
        quorum:
          type: integer
        user_vote:
          type: string
          nullable: true
          enum: ["yes", "no", "viewed", null]
        voting_deadline:
          type: string
          format: date-time
        creatorId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        creator:
          type: object
          properties:
            avatarUrl:
              type: string
              format: uri
            name:
              type: string
            surname:
              type: string
          required: [surname, name, avatarUrl]
      required: [id, title, description, label, image_URL, state, unity, quorum, user_vote, voting_deadline, creatorId, creator, createdAt, updatedAt]
    ProposalDetailsResponse:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        details:
          type: string
        image_url:
          type: string
          format: uri
        type:
          type: string
          enum: ["one_time_payment", "recurring_payment", "agreement"]
        state:
          type: string
          enum: ["active", "past"]
        dao:
          type: string
        commitment:
          type: string
          enum: ["one_time", "recurring"]
        unity:
          type: integer
        quorum:
          type: integer
        past_unity:
          type: integer
        past_quorum:
          type: integer
        voting_deadline:
          type: string
          format: date-time
        user_vote:
          type: string
          nullable: true
          enum: ["yes", "no", "viewed", null]
        creator:
          type: object
          properties:
            username:
              type: string
            address:
              type: string
            avatar_url:
              type: string
              format: uri
        total_votes:
          type: integer
        votes:
          type: array
          items:
            type: object
            properties:
              username:
                type: string
              avatar_url:
                type: string
                format: uri
        start_date:
          type: string
          format: date-time
        duration_weeks:
          type: integer
        tokens:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              amount_per_week:
                type: number
    ProposalVotesResponse:
      type: object
      properties:
        proposal_id:
          type: integer
        unity:
          type: integer
        quorum:
          type: integer
        total_votes:
          type: integer
        votes:
          type: array
          items:
            type: object
            properties:
              username:
                type: string
              avatar_url:
                type: string
                format: uri
              vote:
                type: string
                enum: ["yes", "no", "viewed"]
              voted_time:
                type: string
                format: date-time
    VoteRequest:
      type: object
      properties:
        vote:
          type: string
          enum: ["yes", "no"]
      required:
        - vote
    VoteResponse:
      type: object
      properties:
        message:
          type: string
        proposal_id:
          type: integer
        user_vote:
          type: string
          enum: ["yes", "no"]
        voted_time:
          type: string
          format: date-time
    CreateProposalRequest:
      type: object
      properties:
        dao_id:
          type: integer
        title:
          type: string
        details:
          type: string
        type:
          type: string
        image_url:
          type: string
          format: uri
      required:
        - dao_id
        - title
        - details
        - type
